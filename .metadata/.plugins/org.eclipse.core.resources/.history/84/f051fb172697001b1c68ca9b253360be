package assignment.util;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

public class Main {

	public static void main(String[] args) {
		
		List<Integer> a = new ArrayList<Integer>();
		List<Integer> b = new ArrayList<Integer>();
		List<Integer> c = new ArrayList<Integer>();
		
		a.add(5);
		a.add(6);
		a.add(7);
		
		b.add(3);
		b.add(6);
		b.add(10);
		
		c.add(9);
		c.add(2);
		c.add(9);
		List<List<Integer>> result = new  ArrayList<List<Integer>>();
		result.add(a);
		result.add(b);
		result.add(c);
		
		int[] arr = {256741038, 623958417, 467905213, 714532089, 938071625};
		miniMaxSum(arr);
//		plusMinus(arr);
//		int dd = diagonalDifference(result);
//		System.out.println("dd " + dd);
//		result.forEach(r -> System.out.println(r));
	}
	
	// Complete the miniMaxSum function below.
    static void miniMaxSum(int[] arr) {
    	long min;
    	long max;
    	long sum = 0;
    	
    	min = arr[0];
		max = arr[0];
    	for(int i = 0; i < arr.length; i++) {
    		
    		if(max < arr[i]) {
    			max = arr[i];
    		}
    		if(min > arr[i]) {
    			min = arr[i];
    		}
    		
    		sum += arr[i];
    	}
    	
    	System.out.println((sum - max) + " " + (sum - min));

    }
	
	// Complete the staircase function below.
    static void staircase(int n) {
    	
    	for(int i = 0; i < n; i++) {
    		for(int j = 0; j < n; j++) {
    			if(j <= i ) {
    				System.out.print("*");
    			}
    		}
    		System.out.println();
    	}
    	
//    	int c = n -1;
//    	for(int i = 0; i < n; i++) {
//    		for(int j = 0; j < n; j++) {
//    			if(j < c) {
//    				System.out.print(" ");
//    			} else {
//    				System.out.print("*");
//    			}
//    		}
//    		System.out.println();
//    		c = c -1;
//    	}
    }
    
	// Complete the plusMinus function below.
    static void plusMinus(int[] arr) {
    	double neg = 0;
    	double pos = 0;
    	double zero = 0;
    	for(int i = 0; i < arr.length; i++) {
    		if(arr[i] < 0) {
    			neg++;
    		} else if(arr[i] > 0) {
    			pos++;
    		} else {
    			zero++;
    		}
    	}
    	
    	DecimalFormat df = new DecimalFormat("#.######");
    	System.out.println(df.format(pos/arr.length));
    	System.out.println(df.format(neg/arr.length));
    	System.out.println(df.format(zero/arr.length));
    	
    }
	
	public static int diagonalDifference(List<List<Integer>> arr) {
		int dd = -6;
		int ltr = 0;
		int rtl = 0;
		System.out.println(arr.size());
		for(int i = 0; i < arr.size(); i++) {
			for(int j = 0; j < arr.size(); j++) {
				if(i == j) {
					ltr += arr.get(i).get(j);
				}
				
				if(i == arr.size() - 1 - j) {
					rtl += arr.get(i).get(j);
				}
			}
		}
		
		dd = rtl - ltr;
		return Math.abs(dd);
	}
	
	
	static long aVeryBigSum(long[] ar) {
        long sum = 0l;
        for(int i = 0; i < ar.length; i++) {
            sum += ar[i];
        }
        
        return sum;

    }
	static List<Integer> compareTriplets(List<Integer> a, List<Integer> b) {
		List<Integer> score = new ArrayList<Integer>();
		int aliceScore = 0;
		int bobScore = 0;
		
		for(int i = 0; i < 3; i++) {
			if(a.get(i) > b.get(i)) {
				aliceScore++;
			} else if(a.get(i) < b.get(i)) {
				bobScore++;
			}
		}
		
		score.add(0, aliceScore);
		score.add(1, bobScore);
		
		return score;
	}

}
