package assignment.util;
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {
	
	// Complete the bigSorting function below.
    static String[] bigSorting(String[] unsorted) {
    	
    	Set<String> hash_Set = new TreeSet<String>();
    	double item;
    	for(int i = 0; i< unsorted.length; i++) {
    		item =  unsorted[i];
    	}
    	
    	return null;
    }
    
	public static boolean isAscSorted(int[] d) {
	    for (int i = 0; i < d.length-1; ++i) {
	        if (d[i] > d[i+1]) {
	        	return false;
	        }
	    }
	    return true;
	}
	
	static void swap(int[] arr, int f, int s) {
		int fEle = arr[f];
		int sEle = arr[s];
		arr[f] = sEle;
		arr[s] = fEle;
	}
	
	static void reverse(int[] arr, int from, int to) {
		
		int j = to;
		for(int i = from; i <= to && j > i; i++) {
			swap(arr, i, j);
			j--;
		}
	}
	
	
	static boolean isReverseWorks(int[] arr, int startingPoint) {
		int start = arr[startingPoint];
		int lastIndexOfSmaller = startingPoint;
		
		for(int i = startingPoint; i < arr.length; i++) {
			if(start > arr[i]) {
				lastIndexOfSmaller = i;
			}
		}
		reverse(arr, startingPoint, lastIndexOfSmaller);
		
		if(isAscSorted(arr)) {
			System.out.println("yes");
			System.out.println("reverse " + (startingPoint + 1) + " " + (lastIndexOfSmaller + 1));
		}
		return isAscSorted(arr);
	}
	static int indexOfMin(int[] arr, int startingPoint) {
		int minValue = arr[startingPoint];
		int indexOfMin = startingPoint;
		
		for(int i = startingPoint; i < arr.length; i++) {
			if(minValue > arr[i]) {
				minValue = arr[i];
				indexOfMin = i;
			}
		}
		return indexOfMin;
	}
	
    // Complete the almostSorted function below.
	static void almostSorted(int[] arr) {
		int[] orgArr = arr.clone();
		int indexOfMin = 0;
		if(isAscSorted(arr)) {
			System.out.println("yes");
		} else {
			// try swap sort
			for(int i = 0; i < arr.length; i++) {
				if(arr[i] > arr[i + 1]) {
					indexOfMin = indexOfMin(arr, i);
					swap(arr, indexOfMin, i);

					if(isAscSorted(arr)) {
						System.out.println("yes");
						System.out.println("swap " + (i + 1) + " " + (indexOfMin + 1));
						break;
					} else {
						// try reverse sort
						if(! isReverseWorks(orgArr, i)) {
							System.out.println("no");
							break;
						} else {
							break;
						}
					}
				}
			}
		}
	}
		private static final Scanner scanner = new Scanner(System.in);

		public static void main(String[] args) {
			int n = scanner.nextInt();
			scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

			int[] arr = new int[n];

			String[] arrItems = scanner.nextLine().split(" ");
			scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

			for (int i = 0; i < n; i++) {
				int arrItem = Integer.parseInt(arrItems[i]);
				arr[i] = arrItem;
			}

			almostSorted(arr);

			scanner.close();
		}
}
